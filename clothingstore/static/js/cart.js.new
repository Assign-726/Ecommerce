// Function to show coupon message
function showCouponMessage(message, type = 'success') {
    const couponMessage = document.getElementById('coupon-message');
    if (!couponMessage) return;
    couponMessage.textContent = message;
    couponMessage.className = 'mt-1 text-sm ' + (type === 'success' ? 'text-green-600' : 'text-red-600');
}

// Function to validate coupon via AJAX
function validateCoupon(code) {
    if (!code) return;
    
    const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
    const url = `/cart/validate-coupon/?code=${encodeURIComponent(code)}`;
    
    showCouponMessage('Validating coupon...', 'info');
    
    fetch(url, {
        method: 'GET',
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRFToken': csrfToken
        },
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.valid) {
            showCouponMessage('Coupon code is valid!', 'success');
            // Auto-submit the form if validation is successful
            const applyCouponForm = document.getElementById('apply-coupon-form');
            if (applyCouponForm) {
                applyCouponForm.dispatchEvent(new Event('submit'));
            }
        } else {
            showCouponMessage(data.message || 'Invalid coupon code', 'error');
        }
    })
    .catch(error => {
        console.error('Error validating coupon:', error);
        showCouponMessage('An error occurred while validating the coupon. Please try again.', 'error');
    });
}

// Handle coupon form submission
function handleCouponSubmit(e) {
    e.preventDefault();
    e.stopPropagation();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitButton = form.querySelector('button[type="submit"]');
    const originalButtonText = submitButton.innerHTML;
    const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;
    const couponCode = formData.get('coupon_code')?.trim().toUpperCase();
    
    if (!couponCode) {
        showCouponMessage('Please enter a coupon code', 'error');
        return;
    }
    
    // Update form data with uppercase code
    formData.set('coupon_code', couponCode);
    
    // Show loading state
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Applying...';
    
    // Clear any previous messages
    showCouponMessage('');
    
    fetch(form.action, {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRFToken': csrfToken,
            'Accept': 'application/json'
        },
        credentials: 'same-origin'
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.message || 'Failed to apply coupon');
            });
        }
        return response.json();
    })
    .then(data => {
        console.log('Coupon response:', data);
        
        if (data.valid) {
            showCouponMessage(data.message || 'Coupon applied successfully!', 'success');
            
            // Update the order summary if HTML is provided
            if (data.order_summary_html) {
                const orderSummaryContainer = document.querySelector('#order-summary-container');
                if (orderSummaryContainer) {
                    // Store the current scroll position
                    const scrollPosition = window.scrollY;
                    
                    // Update the order summary
                    orderSummaryContainer.outerHTML = data.order_summary_html;
                    
                    // Reinitialize cart functionality
                    initializeCart();
                    
                    // Restore scroll position after DOM update
                    window.scrollTo(0, scrollPosition);
                    
                    return; // Exit early since we've updated the UI
                }
            }
            
            // Fallback to page reload if we couldn't update the UI directly
            window.location.reload();
        } else {
            showCouponMessage(data.message || 'Invalid coupon code', 'error');
        }
    })
    .catch(error => {
        console.error('Error applying coupon:', error);
        showCouponMessage(error.message || 'An error occurred. Please try again.', 'error');
    })
    .finally(() => {
        // Re-enable submit button and restore original text
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
        }
    });
}

// Handle remove coupon
function handleRemoveCoupon(e) {
    e.preventDefault();
    
    const form = e.target;
    const submitButton = form.querySelector('button[type="submit"]');
    const originalButtonText = submitButton.innerHTML;
    
    // Show loading state
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Removing...';
    
    fetch(form.action, {
        method: 'POST',
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
        },
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.reload();
        } else {
            showCouponMessage('Failed to remove coupon. Please try again.', 'error');
        }
    })
    .catch(error => {
        console.error('Error removing coupon:', error);
        showCouponMessage('An error occurred. Please try again.', 'error');
    })
    .finally(() => {
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
        }
    });
}

// Initialize the cart functionality
function initializeCart() {
    const applyCouponForm = document.getElementById('apply-coupon-form');
    const removeCouponForm = document.getElementById('remove-coupon-form');
    const couponCodeInput = document.getElementById('coupon-code');
    
    // Initialize event listeners
    if (applyCouponForm) {
        applyCouponForm.addEventListener('submit', handleCouponSubmit);
    }
    
    if (removeCouponForm) {
        removeCouponForm.addEventListener('submit', handleRemoveCoupon);
    }

    // Validate coupon as user types
    if (couponCodeInput) {
        let debounceTimer;
        couponCodeInput.addEventListener('input', function() {
            clearTimeout(debounceTimer);
            const code = this.value.trim();
            
            if (code.length < 3) {
                return;
            }
            
            debounceTimer = setTimeout(() => {
                validateCoupon(code);
            }, 500);
        });
    }
}

// Initialize the cart when the DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeCart();
});
